require("dotenv").config();
const fs = require("fs");

const TelegramBot = require("node-telegram-bot-api");
const token = process.env.BOTAPI;
const bot = new TelegramBot(token, { polling: true });

let BankRates = JSON.parse(fs.readFileSync("data.json", "utf8"));
let CBRates = JSON.parse(fs.readFileSync("cb.json", "utf8")).ValCurs.Valute;

bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const first_name = msg.chat.first_name;

  if (msg.text) {
    const text = msg.text.toLowerCase();
    let str = "";
    //CBrates();

    if (~text.indexOf("–∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞")) {
      for (let i = 1; i < 6; i++) {
        str +=
          "üè¶ " +
          BankRates[i][0] +
          "\n\t  –ö—É–ø–∏—Ç—å  " +
          BankRates[i][1] +
          "\n\t  –ü—Ä–æ–¥–∞—Ç—å " +
          BankRates[i][2] +
          "\n\n";
      }
      // bot.sendMessage(chatId, str);
    } else if (~text.indexOf("–∫—É—Ä—Å –µ–≤—Ä–æ")) {
      for (let i = 1; i < 6; i++) {
        str +=
          "üè¶ " +
          BankRates[i][0] +
          "\n\t  –ö—É–ø–∏—Ç—å  " +
          BankRates[i][3] +
          "\n\t  –ü—Ä–æ–¥–∞—Ç—å " +
          BankRates[i][4] +
          "\n\n";
      }
      // bot.sendMessage(chatId, str);
    } else if (~text.indexOf("–∫—É—Ä—Å —Ü–±")) {
      for (let i = 0; i < CBRates.length; i++) {
        str +=
          CBRates[i].Name._text +
          " x" +
          CBRates[i].Nominal._text +
          "\n  " +
          CBRates[i].Value._text +
          "\n\n";
      }
    } else {
      str = "Unknown command";
      //bot.sendMessage(chatId, "Unknown command");
    }
    bot.sendMessage(chatId, str);
  }
});

bot.onText(/\/start/, (msg, match) => {
  const chatId = msg.chat.id;
  openKeyboard(chatId);
  bot.sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç–∏–∫, " + msg.chat.first_name + "!");
});

const openKeyboard = (chatId) => {
  bot.sendMessage(chatId, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞", {
    reply_markup: {
      keyboard: [
        [
          {
            text: "–ö—É—Ä—Å –î–æ–ª–ª–∞—Ä–∞",
          },
          {
            text: "–ö—É—Ä—Å –ï–≤—Ä–æ",
          },
        ],
        [
          {
            text: "–ö—É—Ä—Å –¶–ë",
          },
        ],
      ],
    },
  });
};
